#!/usr/bin/env python3
"""Module to modifiy the itx file"""

from __future__ import annotations

import os
from logging import INFO, Formatter, StreamHandler, getLogger
from typing import IO

import numpy as np
from numpy.typing import NDArray

LOGLEVEL = INFO
logger = getLogger(__name__)
fmt = "%(asctime)s %(levelname)s %(name)s :%(message)s"
formatter = Formatter(fmt)
handler = StreamHandler()
handler.setLevel(LOGLEVEL)
logger.setLevel(LOGLEVEL)
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.propagate = True

DIGIT_ID = 4


def property(itx_file: str | os.PathLike[str]) -> dict[str, str | float | NDArray]:
    """Return the property in the header / integrated value

    Parameters
    ----------
    itx_file: str| os.PathLike[str]
        filename of itx_file generated by SpecsLabProdigy

    Returns
    --------
        dict[str, str|float]
    """
    property: dict[str, str | float | NDArray] = {}
    mode: str = ""
    intensities: list[str | float] = []
    with open(itx_file) as itx:
        for line in itx:
            if line.startswith("IGOR"):
                logger.debug("Mode: COMMENT")
                mode = "COMMENT"
            if mode == "COMMENT":
                if line.startswith("WAVES"):
                    # mode = ""
                    continue
                elif "=" in line:
                    item, content = line.split("=", 1)
                    property[item[4:].strip()] = content.strip()
                elif line.startswith("BEGIN"):
                    mode = "Intensity"
            if mode == "Intensity":
                if line.startswith("END"):
                    property["Intensity"] = np.array([float(x) for x in intensities])
                    property["IntegratedIntensity"] = np.sum(property["Intensity"])
                    mode = "SetScale"
                elif line.startswith("BEGIN"):
                    pass
                else:
                    intensities.extend(line.split())
            if mode == "SetScale":
                pass
    return property


def tune(itx_file: IO[str], angle_correction: float = 0) -> list[str]:
    """tuning itx file, generated by Specs Prodigy.

    The itx file exported by Prodigy contains the following line:

    WAVES/S/N=(600,701) 'Spectrum_17_1'

    this means that the wave name starts with "Spectrum". Unfortunately, this way
    does not provide the unique name. The use of the "Spectrum ID" is more better,
    because the uniqueness is guaranteed in the single sle file.

    Parameters
    -----------
    itx_file: IO[str]
        filename of itx_file generated by SpecsLabProdigy
    angle_correction: float
        Angle correction. **Strongly recommend not to use this argument!!**

    Returns
    --------
        list[str]

    """
    modified_itx: list[str] = []
    line: str = ""
    id: str = ""
    user_comment: str = ""
    excitation_energy: str = ""
    wavename: str = ""
    for line in itx_file:
        if line.startswith("X //Spectrum ID"):
            id = line.split("=")[1].strip()
            wavename = "ID_" + str(id).zfill(DIGIT_ID)
        if "User Comment" in line:
            try:
                user_comment += line.split("=", maxsplit=1)[1].strip()
            except IndexError:
                user_comment += ""
        if line.startswith("X //Excitation Energy"):
            excitation_energy = line.split("=", maxsplit=1)[1].strip()
        if line.startswith("WAVES/S/N"):
            command_part: str = line.split(")", maxsplit=1)[0] + ")"
            line = command_part + " '" + wavename + "'\r\n"
        if line.startswith("END") and user_comment:
            line = (
                "END\r\n"
                + "X Note /NOCR '"
                + wavename
                + "'"
                + ' "'
                + user_comment
                + '"'
                + "\r\n"
            )
            line += (
                "X Note /NOCR '" + wavename + "'" + ' "'
                r"\r\nExcitation_energy:" + excitation_energy + '"' + "\r\n"
            )
        if line.startswith("X SetScale/I x"):
            if angle_correction:
                # 1.3088 が 2021/11/24の解析から求めた値
                scale_x: list[str] = line.split()
                new_scale_x_left: float = float(scale_x[1]) / angle_correction
                new_scale_x_right: float = float(scale_x[2]) / angle_correction
                note: str = r"""X Note /NOCR '{}' "\r\nangle_correction:{}" """.format(
                    wavename, angle_correction
                )
                command_part = " ".join(line.split(",")[:-1])
                line = note + "\r\nX SetScale/I x, {}, {}, {} '{}'\r\n".format(
                    new_scale_x_left,
                    new_scale_x_right,
                    scale_x[5],
                    wavename,
                )
            else:
                command_part = ", ".join(line.split(",")[:-1])
                logger.debug("command_part: {}".format(command_part))
                line = command_part + ", '" + wavename + "'\r\n"
        if line.startswith("X SetScale/I y") or line.startswith("X SetScale/I d"):
            command_part = ", ".join(line.split(",")[:-1])
            line = command_part + ", '" + wavename + "'\r\n"
        modified_itx.append(line.strip() + "\r\n")
    return modified_itx
