#!/usr/bin/env python3
"""Prodigy が出す itx ファイルでは.

WAVES/S/N=(600,701) 'Spectrum_17_1'

など、 "Spectrum" の項目をWave名として割り当てる仕様になっている。
しかし、一つの.sleファイルで一意性を有しているのは "Spectrum ID"
なので、そちらを用いた方がよい。

"""
from __future__ import annotations

import argparse
from logging import DEBUG, Formatter, StreamHandler, getLogger
from pathlib import Path
from typing import IO

LOGLEVEL = DEBUG
logger = getLogger(__name__)
fmt = "%(asctime)s %(levelname)s %(name)s :%(message)s"
formatter = Formatter(fmt)
handler = StreamHandler()
handler.setLevel(LOGLEVEL)
logger.setLevel(LOGLEVEL)
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.propagate = True

DIGIT_ID = 3


def tune(itx_file: IO[str]) -> list[str]:
    """Tuning itx file, generated by Specs Prodigy.

    The itx file exported by Prodigy contains the following line:

    WAVES/S/N=(600,701) 'Spectrum_17_1'

    this means that the wave name starts with "Spectrum". Unfortunately, this way
    does not provide the unique name. The use of the "Spectrum ID" is more better,
    because the uniqueness is guaranteed in the single sle file.

    Parameters
    ----------
    itx_file: IO[str]
        filename of itx_file generated by SpecsLabProdigy
    angle_correction: float
        Angle correction. **Strongly recommend not to use this argument!!**

    Returns
    -------
        list[str]

    """
    modified_itx: list[str] = []
    line: str = ""
    id_number: str = ""
    user_comment: str = ""
    excitation_energy: str = ""
    wavename: str = ""
    for line in itx_file:
        if line.startswith("X //Spectrum ID"):
            id_number = line.split("=")[1].strip()
            wavename = "ID_" + str(id_number).zfill(DIGIT_ID)
        if "User Comment" in line:
            try:
                user_comment += line.split("=", maxsplit=1)[1].strip()
            except IndexError:
                user_comment += ""
        if line.startswith("X //Excitation Energy"):
            excitation_energy = line.split("=", maxsplit=1)[1].strip()
        if line.startswith("WAVES/S/N"):
            command_part: str = line.split(")", maxsplit=1)[0] + ")"
            line = command_part + " '" + wavename + "'\r\n"
        if line.startswith("END") and user_comment:
            line = (
                "END\r\n"
                + "X Note /NOCR '"
                + wavename
                + "'"
                + ' "'
                + user_comment
                + '"'
                + "\r\n"
            )
            line += (
                "X Note /NOCR '" + wavename + "'" + ' "'
                r"\r\nExcitation_energy:" + excitation_energy + '"' + "\r\n"
            )
        if line.startswith("X SetScale/I x"):
            command_part = ", ".join(line.split(",")[:-1])
            logger.debug(f"command_part: {command_part}")
            line = command_part + ", '" + wavename + "'\r\n"
        if line.startswith(("X SetScale/I y", "X SetScale/I d")):
            command_part = ", ".join(line.split(",")[:-1])
            line = command_part + ", '" + wavename + "'\r\n"
        modified_itx.append(line.strip() + "\r\n")
    return modified_itx


if __name__ == "__main__":
    parser: argparse.ArgumentParser = argparse.ArgumentParser()
    parser.add_argument(
        "-o",
        "--output",
        metavar="file_name",
        help="""output file name.
if not specified, use standard output""",
    )
    parser.add_argument(
        "itx_files",
        metavar="itx_file",
        nargs="+",
        help="itx file to be handled",
    )
    args = parser.parse_args()
    logger.debug(args)
    corrected_itx: list[str] = []
    for itx_file in args.itx_files:
        logger.info(f"itx_file name:{itx_file}")
        with Path(itx_file).open(mode="r") as itx:
            corrected_itx += tune(itx)
    corrected_itx = ["IGOR\r\n"] + [i for i in corrected_itx if i != "IGOR\r\n"]
    if args.output:
        with Path(args.output).open(mode="wb") as output_file:
            output_file.write(("".join(corrected_itx)).encode(encoding="utf-8"))
    else:
        print("".join(corrected_itx))
